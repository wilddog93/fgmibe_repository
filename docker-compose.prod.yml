# docker-compose.prod.yml

services:
  node-app:
    build:
      context: .
      args:
        BUILD_DIR: build
    image: node-app:prod
    container_name: node-app-prod
    working_dir: /usr/src/node-app
    env_file: .env
    restart: unless-stopped
    ports:
      - '4000:4000'
    depends_on:
      postgresdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:4000/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [node-network]

  postgresdb:
    image: postgres:15-alpine
    container_name: postgresdb
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: fgmi_db
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d fgmi_db || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks: [node-network]

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks: [node-network]

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certbot:/etc/letsencrypt
      - ./nginx/html:/usr/share/nginx/html
    depends_on: [node-app]
    networks: [node-network]

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot:/etc/letsencrypt
      - ./nginx/html:/usr/share/nginx/html
    entrypoint: >
      sh -c "trap exit TERM; while :; do
      certbot renew --webroot -w /usr/share/nginx/html --quiet;
      sleep 12h & wait $${!};
      done"
    networks: [node-network]

volumes:
  dbdata:

networks:
  node-network:
    driver: bridge
