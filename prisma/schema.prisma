generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// AUTH MODELS
// =======================

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  phone           String?
  avatar          String?
  username        String?  @unique
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  accounts             Account[]
  tokens               Token[]
  programRegistrations ProgramRegistration[]

  member Member?

  @@map("users")
}

model Account {
  id                Int    @id @default(autoincrement())
  userId            Int    @map("user_id")
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  type        TokenType
  expires     DateTime
  blacklisted Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@map("tokens")
}

enum Role {
  USER
  MEMBER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

// =======================
// DOMAIN MODELS
// =======================

model Member {
  id                String            @id @default(uuid())
  name              String
  email             String            @unique
  phone             String?
  segment           Segment
  institution       String?
  interestAreas     String[] // postgres text[]
  membershipPackage MembershipPackage
  joinDate          DateTime          @default(now())
  status            MemberStatus      @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  registrations ProgramRegistration[]
  payments      Payment[]
  user          User?                 @relation(fields: [userId], references: [id])
  userId        Int?                  @unique

  @@map("members")
}

enum MembershipPackage {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

model Program {
  id          String          @id @default(uuid())
  name        String
  category    ProgramCategory
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProgramStatus   @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  registrations ProgramRegistration[]

  @@map("programs")
}

enum ProgramCategory {
  WEBINAR
  BOOTCAMP
  TRAINING
}

enum ProgramStatus {
  ACTIVE
  INACTIVE
}

model ProgramRegistration {
  id             String             @id @default(uuid())
  programId      String
  memberId       String? // optional → kalau peserta terdeteksi member
  userId         Int? // optional → kalau peserta login user
  email          String
  name           String
  phone          String?
  institution    String?
  segment        Segment? // kasih nullable → kalau umum boleh kosong
  programPackage String?
  registeredAt   DateTime           @default(now())
  source         RegistrationSource // enum: MEMBER | NON_MEMBER | ADMIN

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  member   Member?   @relation(fields: [memberId], references: [id], onDelete: SetNull)
  program  Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@unique([email, programId])
  @@index([programId])
  @@index([userId])
  @@index([memberId])
  @@map("program_registrations")
}

enum RegistrationSource {
  MEMBER
  NON_MEMBER
  ADMIN
}

model Payment {
  id                   String         @id @default(uuid())
  orderId              String         @unique
  email                String
  amount               Int
  currency             String         @default("IDR")
  method               PaymentMethod  @default(QRIS)
  gateway              PaymentGateway @default(MIDTRANS)
  gatewayTransactionId String?
  status               PaymentStatus  @default(PENDING)
  rawPayload           Json?
  paidAt               DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  referenceType        String? // "MEMBERSHIP", "PROGRAM"

  // Relations
  member         Member?              @relation(fields: [memberId], references: [id], onDelete: SetNull)
  memberId       String?
  registration   ProgramRegistration? @relation(fields: [registrationId], references: [id], onDelete: SetNull)
  registrationId String?

  @@map("payments")
}

enum Segment {
  STUDENT
  FRESH_GRADUATE
  PROFESSIONAL
}

enum PaymentMethod {
  QRIS
  BANK_TRANSFER
  EWALLET
}

enum PaymentGateway {
  MIDTRANS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
